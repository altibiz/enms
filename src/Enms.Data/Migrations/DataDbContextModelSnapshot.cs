// <auto-generated />
using System;
using Enms.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Enms.Data.Migrations
{
    [DbContext(typeof(DataDbContext))]
    partial class DataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "audit_entity", new[] { "query", "creation", "modification", "deletion" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "interval_entity", new[] { "quarter_hour", "day", "month" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "level_entity", new[] { "trace", "debug", "info", "warning", "error", "critical" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "phase_entity", new[] { "l1", "l2", "l3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_entity", new[] { "operator_representative", "user_representative" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "timescaledb");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Enms.Data.Entities.Base.EventEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("kind");

                    b.HasKey("_id")
                        .HasName("pk_events");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("EventEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Enms.Data.Entities.Base.LineEntity", b =>
                {
                    b.Property<string>("_lineId")
                        .HasColumnType("text")
                        .HasColumnName("line_id");

                    b.Property<string>("_meterId")
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<float>("ConnectionPower_W")
                        .HasColumnType("real")
                        .HasColumnName("connection_power_w");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<int[]>("Phases")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("phases");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasColumnName("kind");

                    b.HasKey("_lineId", "_meterId")
                        .HasName("pk_lines");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_lines_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_lines_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_lines_last_updated_by_id");

                    b.ToTable("lines", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("LineEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Enms.Data.Entities.Base.MeterEntity", b =>
                {
                    b.Property<string>("_stringId")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)")
                        .HasColumnName("kind");

                    b.HasKey("_stringId")
                        .HasName("pk_meters");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_meters_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_meters_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_meters_last_updated_by_id");

                    b.ToTable("meters", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("MeterEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Enms.Data.Entities.EgaugeAggregateEntity", b =>
                {
                    b.Property<int>("Interval")
                        .HasColumnType("integer")
                        .HasColumnName("interval");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("LineId")
                        .HasColumnType("text")
                        .HasColumnName("line_id");

                    b.Property<string>("MeterId")
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<float>("ActivePowerL1NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l1_net_t0_avg_w");

                    b.Property<float>("ActivePowerL2NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l2_net_t0_avg_w");

                    b.Property<float>("ActivePowerL3NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l3_net_t0_avg_w");

                    b.Property<float>("ApparentPowerL1NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("apparent_power_l1_net_t0_avg_w");

                    b.Property<float>("ApparentPowerL2NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("apparent_power_l2_net_t0_avg_w");

                    b.Property<float>("ApparentPowerL3NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("apparent_power_l3_net_t0_avg_w");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<float>("CurrentL1AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l1_any_t0_avg_a");

                    b.Property<float>("CurrentL2AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l2_any_t0_avg_a");

                    b.Property<float>("CurrentL3AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l3_any_t0_avg_a");

                    b.Property<float>("VoltageL1AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l1_any_t0_avg_v");

                    b.Property<float>("VoltageL2AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l2_any_t0_avg_v");

                    b.Property<float>("VoltageL3AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l3_any_t0_avg_v");

                    b.HasKey("Interval", "Timestamp", "LineId", "MeterId")
                        .HasName("pk_egauge_aggregates");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_egauge_aggregates_meter_id");

                    b.HasIndex("LineId", "MeterId")
                        .HasDatabaseName("ix_egauge_aggregates_line_id_meter_id");

                    b.ToTable("egauge_aggregates", (string)null);

                    b.HasAnnotation("TimescaleHypertable", "Timestamp,MeterId:number_partitions => 256");
                });

            modelBuilder.Entity("Enms.Data.Entities.EgaugeMeasurementEntity", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("LineId")
                        .HasColumnType("text")
                        .HasColumnName("line_id");

                    b.Property<string>("MeterId")
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<float>("ActivePowerL1NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l1_net_t0_w");

                    b.Property<float>("ActivePowerL2NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l2_net_t0_w");

                    b.Property<float>("ActivePowerL3NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l3_net_t0_w");

                    b.Property<float>("ApparentPowerL1NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("apparent_power_l1_net_t0_w");

                    b.Property<float>("ApparentPowerL2NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("apparent_power_l2_net_t0_w");

                    b.Property<float>("ApparentPowerL3NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("apparent_power_l3_net_t0_w");

                    b.Property<float>("CurrentL1AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l1_any_t0_a");

                    b.Property<float>("CurrentL2AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l2_any_t0_a");

                    b.Property<float>("CurrentL3AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l3_any_t0_a");

                    b.Property<float>("VoltageL1AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l1_any_t0_v");

                    b.Property<float>("VoltageL2AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l2_any_t0_v");

                    b.Property<float>("VoltageL3AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l3_any_t0_v");

                    b.HasKey("Timestamp", "LineId", "MeterId")
                        .HasName("pk_egauge_measurements");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_egauge_measurements_meter_id");

                    b.HasIndex("LineId", "MeterId")
                        .HasDatabaseName("ix_egauge_measurements_line_id_meter_id");

                    b.ToTable("egauge_measurements", (string)null);

                    b.HasAnnotation("TimescaleHypertable", "Timestamp,MeterId:number_partitions => 256");
                });

            modelBuilder.Entity("Enms.Data.Entities.MeasurementValidatorEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("kind");

                    b.HasKey("_id")
                        .HasName("pk_measurement_validators");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_measurement_validators_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_measurement_validators_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_measurement_validators_last_updated_by_id");

                    b.ToTable("measurement_validators", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("MeasurementValidatorEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Enms.Data.Entities.RepresentativeEntity", b =>
                {
                    b.Property<string>("_stringId")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("social_security_number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("_stringId")
                        .HasName("pk_representatives");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_representatives_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_representatives_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_representatives_last_updated_by_id");

                    b.ToTable("representatives", (string)null);
                });

            modelBuilder.Entity("Enms.Data.Entities.Base.AuditEventEntity", b =>
                {
                    b.HasBaseType("Enms.Data.Entities.Base.EventEntity");

                    b.Property<int>("Audit")
                        .HasColumnType("integer")
                        .HasColumnName("audit");

                    b.Property<string>("AuditableEntityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auditable_entity_id");

                    b.Property<string>("AuditableEntityTable")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auditable_entity_table");

                    b.Property<string>("AuditableEntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auditable_entity_type");

                    b.HasIndex(new[] { "AuditableEntityTable", "AuditableEntityId" }, "ix_events_auditable_entity_table_auditable_entity_id")
                        .HasDatabaseName("ix_events_auditable_entity_table_auditable_entity_id");

                    b.HasIndex(new[] { "AuditableEntityType", "AuditableEntityId" }, "ix_events_auditable_entity_type_auditable_entity_id")
                        .HasDatabaseName("ix_events_auditable_entity_type_auditable_entity_id");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator().HasValue("AuditEventEntity");
                });

            modelBuilder.Entity("Enms.Data.Entities.RepresentativeEventEntity", b =>
                {
                    b.HasBaseType("Enms.Data.Entities.Base.EventEntity");

                    b.Property<string>("RepresentativeId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("representative_id");

                    b.HasIndex("RepresentativeId")
                        .HasDatabaseName("ix_events_representative_id");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator().HasValue("RepresentativeEventEntity");
                });

            modelBuilder.Entity("Enms.Data.Entities.SystemEventEntity", b =>
                {
                    b.HasBaseType("Enms.Data.Entities.Base.EventEntity");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator().HasValue("SystemEventEntity");
                });

            modelBuilder.Entity("Enms.Data.Entities.EgaugeLineEntity", b =>
                {
                    b.HasBaseType("Enms.Data.Entities.Base.LineEntity");

                    b.Property<long>("_measurementValidatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("measurement_validator_id");

                    b.HasIndex("_measurementValidatorId")
                        .HasDatabaseName("ix_lines__measurement_validator_id");

                    b.HasIndex("_meterId")
                        .HasDatabaseName("ix_lines_meter_id");

                    b.ToTable("lines", (string)null);

                    b.HasDiscriminator().HasValue("EgaugeLineEntity");
                });

            modelBuilder.Entity("Enms.Data.Entities.EgaugeMeterEntity", b =>
                {
                    b.HasBaseType("Enms.Data.Entities.Base.MeterEntity");

                    b.ToTable("meters", (string)null);

                    b.HasDiscriminator().HasValue("EgaugeMeterEntity");
                });

            modelBuilder.Entity("Enms.Data.Entities.EgaugeMeasurementValidatorEntity", b =>
                {
                    b.HasBaseType("Enms.Data.Entities.MeasurementValidatorEntity");

                    b.ToTable("measurement_validators", (string)null);

                    b.HasDiscriminator().HasValue("EgaugeMeasurementValidatorEntity");
                });

            modelBuilder.Entity("Enms.Data.Entities.RepresentativeAuditEventEntity", b =>
                {
                    b.HasBaseType("Enms.Data.Entities.Base.AuditEventEntity");

                    b.Property<string>("RepresentativeId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("representative_id");

                    b.HasIndex("RepresentativeId")
                        .HasDatabaseName("ix_events_representative_id");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator().HasValue("RepresentativeAuditEventEntity");
                });

            modelBuilder.Entity("Enms.Data.Entities.SystemAuditEventEntity", b =>
                {
                    b.HasBaseType("Enms.Data.Entities.Base.AuditEventEntity");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator().HasValue("SystemAuditEventEntity");
                });

            modelBuilder.Entity("Enms.Data.Entities.Base.LineEntity", b =>
                {
                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_lines_representatives_created_by_id");

                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_lines_representatives_deleted_by_id");

                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_lines_representatives_last_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Enms.Data.Entities.Base.MeterEntity", b =>
                {
                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_meters_representatives_created_by_id");

                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_meters_representatives_deleted_by_id");

                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_meters_representatives_last_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Enms.Data.Entities.EgaugeAggregateEntity", b =>
                {
                    b.HasOne("Enms.Data.Entities.EgaugeMeterEntity", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_egauge_aggregates_meters_meter_id");

                    b.HasOne("Enms.Data.Entities.EgaugeLineEntity", "Line")
                        .WithMany("Aggregates")
                        .HasForeignKey("LineId", "MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_egauge_aggregates_lines_line_id_meter_id");

                    b.Navigation("Line");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Enms.Data.Entities.EgaugeMeasurementEntity", b =>
                {
                    b.HasOne("Enms.Data.Entities.EgaugeMeterEntity", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_egauge_measurements_meters_meter_id");

                    b.HasOne("Enms.Data.Entities.EgaugeLineEntity", "Line")
                        .WithMany("Measurements")
                        .HasForeignKey("LineId", "MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_egauge_measurements_lines_line_id_meter_id");

                    b.Navigation("Line");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Enms.Data.Entities.MeasurementValidatorEntity", b =>
                {
                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_measurement_validators_representatives_created_by_id");

                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_measurement_validators_representatives_deleted_by_id");

                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_measurement_validators_representatives_last_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Enms.Data.Entities.RepresentativeEntity", b =>
                {
                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_representatives_representatives_created_by_id");

                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_representatives_representatives_deleted_by_id");

                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_representatives_representatives_last_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Enms.Data.Entities.RepresentativeEventEntity", b =>
                {
                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "Representative")
                        .WithMany("Events")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_representatives_representative_id");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("Enms.Data.Entities.EgaugeLineEntity", b =>
                {
                    b.HasOne("Enms.Data.Entities.EgaugeMeasurementValidatorEntity", "MeasurementValidator")
                        .WithMany("Lines")
                        .HasForeignKey("_measurementValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lines_measurement_validators__measurement_validator_id");

                    b.HasOne("Enms.Data.Entities.EgaugeMeterEntity", "Meter")
                        .WithMany("Lines")
                        .HasForeignKey("_meterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lines_meters_meter_id");

                    b.Navigation("MeasurementValidator");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Enms.Data.Entities.RepresentativeAuditEventEntity", b =>
                {
                    b.HasOne("Enms.Data.Entities.RepresentativeEntity", "Representative")
                        .WithMany("AuditEvents")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_representatives_representative_id");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("Enms.Data.Entities.RepresentativeEntity", b =>
                {
                    b.Navigation("AuditEvents");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Enms.Data.Entities.EgaugeLineEntity", b =>
                {
                    b.Navigation("Aggregates");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("Enms.Data.Entities.EgaugeMeterEntity", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Enms.Data.Entities.EgaugeMeasurementValidatorEntity", b =>
                {
                    b.Navigation("Lines");
                });
#pragma warning restore 612, 618
        }
    }
}
