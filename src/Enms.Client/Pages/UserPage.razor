@page "/user/{id?}"

@namespace Enms.Client.Pages

@attribute [Authorize]
@using Enms.Business.Models
@using Enms.Business.Models.Enums
@using Enms.Business.Models.Composite
@using Enms.Business.Mutations
@using Enms.Business.Queries
@using Enms.Client.Shared.Models
@using Enms.Client.Shared.Streaming
@using Enms.Client.State
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.DependencyInjection
@using MudBlazor
@inherits Enms.Client.Base.EnmsOwningComponentBase

<Mutating
  T="MaybeRepresentingUserModel"
  LoadAsync="@(Id is null ? null : () => ScopedServices.GetRequiredService<RepresentativeQueries>().MaybeRepresentingUserByUserId(Id))"
  CreateAsync="@(model => ScopedServices.GetRequiredService<RepresentativeMutations>().Create(model))"
  UpdateAsync="@(model => ScopedServices.GetRequiredService<RepresentativeMutations>().Update(model))"
  DeleteAsync="@(model => ScopedServices.GetRequiredService<RepresentativeMutations>().Delete(model))">
  <Edit Context="model">
    <MaybeRepresentingUserEdit Model="@model"/>
  </Edit>
  <Details Context="model">
    <MaybeRepresentingUserDetails Model="@model"/>
  </Details>
</Mutating>

@if (UserState.User.MaybeRepresentative is not
  { Role: RoleModel.OperatorRepresentative }
  || Id is null)
{
  return;
}

<MudText Typo="Typo.h6" Class="mt-8 mb-6">
  @Translate("Audit events")
</MudText>
<MudDivider />

<Paging PageAsync="(page) => ScopedServices
  .GetRequiredService<EventQueries>()
  .ReadRepresentativeAuditEvents(Id, page)">
  <Summary Context="e">
    @{
      var href = $"event/{e.Id}";

      <MudLink
        Href="@href"
        Underline="Underline.Hover"
        Color="Color.Dark">
        <div class="pt-4 pb-2">
          <EventSummary Model="@e"/>
        </div>
      </MudLink>
      <MudDivider />
    }
  </Summary>
</Paging>

@code {

  [Parameter]
  public string? Id { get; set; }

  [CascadingParameter]
  public UserState UserState { get; set; } = default!;

}
