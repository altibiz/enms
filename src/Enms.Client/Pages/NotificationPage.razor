@page "/notification/{id?}"

@namespace Enms.Client.Pages

@attribute [Authorize]
@using Enms.Business.Models.Base
@using Enms.Business.Models
@using Enms.Business.Activation.Agnostic
@using Enms.Business.Mutations
@using Enms.Business.Queries.Agnostic
@using Enms.Business.Models.Enums
@using Enms.Client.Shared.Models
@using Enms.Client.Shared.Streaming
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.DependencyInjection
@using Enms.Client.State
@using MudBlazor
@inherits Enms.Client.Base.EnmsOwningComponentBase

@if (UserState.User.MaybeRepresentative is not
  { Role: RoleModel.OperatorRepresentative })
{
  <Loading T="NotificationModel" Id="@Id">
    <Found Context="model">
      <NotificationDetails Model="@model"/>
    </Found>
  </Loading>
  return;
}

<Mutating
  T="NotificationModel"
  LoadAsync="@(() => ScopedServices
    .GetRequiredService<AgnosticQueries>()
    .ReadSingle<NotificationModel>(Id!))"
  NewAsync="@(async () => ScopedServices
    .GetRequiredService<AgnosticModelActivator>()
    .Activate<SystemNotificationModel>())"
  CreateAsync="@((model) => ScopedServices
    .GetRequiredService<NotificationMutations>()
    .Create(model))"
  Id="@Id">
  <Edit Context="model">
    <NotificationEdit Model="@model"/>
  </Edit>
  <Details Context="model">
    <NotificationDetails Model="@model"/>
    <div class="d-flex flex-row mt-4 justify-end">
      <MudButton
        Variant="Variant.Filled"
        Class="align-self-end"
        OnClick="() => OnMarkAsSeen(model)">
        @Translate("Mark as seen")
      </MudButton>
    </div>
  </Details>
</Mutating>

@code {

  [Parameter]
  public string? Id { get; set; }

  [CascadingParameter]
  public UserState UserState { get; set; } = default!;

  private async Task OnMarkAsSeen(NotificationModel model)
  {
    await ScopedServices
      .GetRequiredService<NotificationMutations>()
      .Seen(model, UserState.User.MaybeRepresentative!);
    NavigateToPage<NotificationsPage>();
  }
}
