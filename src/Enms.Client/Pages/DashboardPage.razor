@page "/"

@using MudBlazor
@namespace Enms.Client.Pages

@attribute [Navigation(
  Title = "Dashboard",
  RouteValue = "",
  Order = -100,
  Icon = Icons.Material.Filled.Dashboard
)]
@attribute [Authorize]
@using Enms.Client.State
@using Enms.Client.Shared.Charts
@using Enms.Client.Shared.Streaming
@using Enms.Business.Models.Enums
@using Enms.Business.Models.Composite
@using Enms.Business.Queries.Agnostic
@using Enms.Business.Queries
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.DependencyInjection
@inherits Enms.Client.Base.EnmsOwningComponentBase

@if (user is null)
{
  NavigateToLogin();
  return;
}

@if (user.User.MaybeRepresentative is null)
{
  <MudText Typo="Typo.h3">
    @Translate("Welcome,") @(user.User.User.UserName).
  </MudText>
  <MudText Class="mt-4">
    @Translate("Please wait until your data arrives in our system.")
    @Translate("You will be notified when this happens via email.")
  </MudText>
  return;
}

@if (user.User.MaybeRepresentative is { } representative)
{
  @if (representative.Role == RoleModel.UserRepresentative)
  {
    <Loading
        T="NetworkUserLines"
        LoadAsync="@(() => ScopedServices
          .GetRequiredService<DashboardQueries>()
          .NetworkUserLines(representative))">
      <Found Context="networkUserLines">
        <LineGraph Lines="networkUserLines.Lines" />
      </Found>
    </Loading>
    return;
  }

  @if (representative.Role == RoleModel.OperatorRepresentative)
  {
    <Loading
        LoadAsync="@(() => ScopedServices
          .GetRequiredService<DashboardQueries>()
          .OperatorLines())">
      <Found Context="operatorLines">
        <LineGraph Lines="operatorLines" />
      </Found>
    </Loading>
    return;
  }
}

@code {

  [CascadingParameter]
  public UserState user { get; set; } = default!;
}
