@using Enms.Client.State
@using MudBlazor

@namespace Enms.Client.Shared.Streaming

@typeparam T

@if (_state is null)
{
  return;
}

@if (_state.IsLoading)
{
  if (Progress is not null)
  {
    @Progress
    return;
  }

  <MudProgressCircular/>
  return;
}

@if (_state.Error is not null)
{
  if (Error is not null)
  {
    @Error(_state.Error!)
    return;
  }

  <MudAlert Severity="Severity.Error">
    @_state.Error
  </MudAlert>
  return;
}

@if (_state.Value is null)
{
  if (NotFound is not null)
  {
    @NotFound
    return;
  }

  <NotFound/>
  return;
}

@if (Found is not null)
{
  @Found(_state.Value)
}

@code {
  [Parameter]
  public T? Value { get; set; }

  [Parameter]
  public Func<T?>? Load { get; set; }

  [Parameter]
  public Func<Task<T?>>? LoadAsync { get; set; }

  [Parameter]
  public RenderFragment? Progress { get; set; }

  [Parameter]
  public RenderFragment<string>? Error { get; set; }

  [Parameter]
  public RenderFragment? NotFound { get; set; }

  [Parameter]
  public RenderFragment<T>? Found { get; set; }

  public LoadingState<T> _state { get; set; } = new();

  protected override void OnParametersSet()
  {
    if (Value is not null)
    {
      _state = _state.WithValue(Value);
    }
  }

  protected override void OnInitialized()
  {
    if (_state is null)
    {
      return;
    }

    if (!_state.IsLoading)
    {
      return;
    }

    if (Load is not null)
    {
      try
      {
        _state = _state.WithValue(Load());
      }
      catch (Exception e)
      {
        _state = _state.WithError(e.Message);
      }
    }
  }

  protected override async Task OnInitializedAsync()
  {
    if (_state is null)
    {
      return;
    }

    if (!_state.IsLoading)
    {
      return;
    }

    if (LoadAsync is not null)
    {
      try
      {
        _state = _state.WithValue(await LoadAsync());
      }
      catch (Exception e)
      {
        _state = _state.WithError(e.Message);
      }
    }
  }
}
