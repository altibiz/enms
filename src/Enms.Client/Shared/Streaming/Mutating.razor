@namespace Enms.Client.Shared.Streaming

@typeparam T where T : notnull
@using Enms.Business.Models.Abstractions
@using Enms.Business.Mutations.Agnostic
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.DependencyInjection
@using MudBlazor
@inherits Enms.Client.Base.EnmsOwningComponentBase

@inject IDialogService DialogService

<Loading
  T="T"
  Value="@Value"
  Progress="@Progress"
  Error="@Error"
  Id="@Id"
  Load="@Load"
  LoadAsync="@LoadAsync"
  New="@New"
  NewAsync="@NewAsync"
  ActivateAsync>
  <Found Context="model">
    @if (_mutating)
    {
      <EditForm
        Model="@model"
        OnValidSubmit="@(() => OnUpdate(model))">
        @Edit(model)
        <DataAnnotationsValidator />
        <ValidationSummary />
        <MudButton ButtonType="ButtonType.Submit">
          @Translate("Update")
        </MudButton>
      </EditForm>
      <MudButton OnClick="@(() => OnDelete(model))">
        @Translate("Delete")
      </MudButton>
      <MudButton OnClick="@(() => _mutating = !_mutating)">
        @Translate("Back")
      </MudButton>
    }
    else
    {
      @Details(model)
      <MudButton OnClick="@(() => _mutating = !_mutating)">
        @Translate("Mutate")
      </MudButton>
    }
  </Found>
  <Created Context="model">
    @if (!_mutating)
    {
      <EditForm
        Model="@model"
        OnValidSubmit="@(() => OnCreate(model))">
        @Edit(model)
        <DataAnnotationsValidator />
        <ValidationSummary />
        <MudButton ButtonType="ButtonType.Submit">
          @Translate("Create")
        </MudButton>
      </EditForm>
      <MudButton OnClick="@(() => _mutating = !_mutating)">
        @Translate("Preview")
      </MudButton>
    }
    else
    {
      @Details(model)
      <MudButton OnClick="@(() => _mutating = !_mutating)">
        @Translate("Mutate")
      </MudButton>
    }
  </Created>
</Loading>

@code {

  [Parameter]
  public T? Value { get; set; }

  [Parameter]
  public string? Id { get; set; } = default!;

  [Parameter]
  public RenderFragment? Progress { get; set; }

  [Parameter]
  public Func<T?>? Load { get; set; }

  [Parameter]
  public Func<Task<T?>>? LoadAsync { get; set; }

  [Parameter]
  public Func<T>? New { get; set; }

  [Parameter]
  public Func<Task<T>>? NewAsync { get; set; }

  [Parameter]
  public RenderFragment<string>? Error { get; set; }

  [Parameter]
  public Action<T>? Create { get; set; }

  [Parameter]
  public Func<T, Task>? CreateAsync { get; set; }

  [Parameter]
  public Action<T>? Update { get; set; }

  [Parameter]
  public Func<T, Task>? UpdateAsync { get; set; }

  [Parameter]
  public Action<T>? Delete { get; set; }

  [Parameter]
  public Func<T, Task>? DeleteAsync { get; set; }

  [Parameter]
  public RenderFragment<T> Details { get; set; } = default!;

  [Parameter]
  public RenderFragment<T> Edit { get; set; } = default!;

  private bool _mutating;

  private async Task OnCreate(T model)
  {
    try
    {
      if (Create is not null)
      {
        Create(model);
      }
      else if (CreateAsync is not null)
      {
        await CreateAsync(model);
      }
      else if (model?.GetType().IsAssignableTo(typeof(IAuditable)) ?? false)
      {
        var mutations = ScopedServices.GetRequiredService<AgnosticMutations>();
        mutations.Create((model as IAuditable)!);
        await mutations.Save();
      }
    }
    catch (Exception ex)
    {
      DialogService.Show<MutatingFailure>(
        $"Not saved - {ex.Message}",
        new DialogOptions { CloseOnEscapeKey = true });
      return;
    }

    DialogService.Show<MutatingSuccess>(
      "Saved",
      new DialogOptions { CloseOnEscapeKey = true });
  }

  private async Task OnUpdate(T model)
  {
    try
    {
      if (Update is not null)
      {
        Update(model);
      }
      else if (UpdateAsync is not null)
      {
        await UpdateAsync(model);
      }
      else if (model?.GetType().IsAssignableTo(typeof(IAuditable)) ?? false)
      {
        var mutations = ScopedServices.GetRequiredService<AgnosticMutations>();
        mutations.Update((model as IAuditable)!);
        await mutations.Save();
      }
    }
    catch (Exception ex)
    {
      DialogService.Show<MutatingFailure>(
        $"Not saved - {ex.Message}",
        new DialogOptions { CloseOnEscapeKey = true });
      return;
    }

    DialogService.Show<MutatingSuccess>(
      "Saved",
      new DialogOptions { CloseOnEscapeKey = true });
  }

  private async Task OnDelete(T model)
  {
    try
    {
      if (Delete is not null)
      {
        Delete(model);
      }
      else if (DeleteAsync is not null)
      {
        await DeleteAsync(model);
      }
      else if (model?.GetType().IsAssignableTo(typeof(IAuditable)) ?? false)
      {
        var mutations = ScopedServices.GetRequiredService<AgnosticMutations>();
        mutations.Delete((model as IAuditable)!);
        await mutations.Save();
      }
    }
    catch (Exception ex)
    {
      DialogService.Show<MutatingFailure>(
        $"Not saved - {ex.Message}",
        new DialogOptions { CloseOnEscapeKey = true });
      return;
    }

    DialogService.Show<MutatingSuccess>(
      "Saved",
      new DialogOptions { CloseOnEscapeKey = true });
  }

}
