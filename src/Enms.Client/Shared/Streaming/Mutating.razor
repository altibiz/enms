@namespace Enms.Client.Shared.Streaming

@typeparam T where T : notnull
@using Enms.Business.Models.Abstractions
@using Enms.Business.Mutations.Agnostic
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.DependencyInjection
@using Enms.Client.Shared.Fields
@using MudBlazor
@inherits Enms.Client.Base.EnmsOwningComponentBase

@inject IDialogService DialogService

<Loading
  T="T"
  Value="@Value"
  Progress="@Progress"
  Error="@Error"
  Id="@Id"
  Load="@Load"
  LoadAsync="@LoadAsync"
  New="@New"
  NewAsync="@NewAsync"
  ActivateAsync>
  <Found Context="model">
    @if (Label is not null)
    {
      @Label(model)
      <MudDivider Class="mb-4" />
    }
    else if (model is IIdentifiable identifiable)
    {
      <MudText Typo="Typo.h5" Class="mb-2">
        @if (_mutating)
        {
          @Translate("Edit")
        }
        @(identifiable.Title)
      </MudText>
      <MudDivider Class="mb-4" />
      <DetailsField Title="@Translate("Id")">
        @identifiable.Id
      </DetailsField>
    }
    else
    {
      <MudText Typo="Typo.h5" Class="mb-2">
        @if (_mutating)
        {
          @Translate("Edit")
        }
        @(typeof(T).Name)
      </MudText>
      <MudDivider Class="mb-4" />
    }

    @if (model is IReadonly)
    {
      @Details(model)
    }
    else
    {
      <EditForm
        Model="@model"
        OnValidSubmit="@(() => OnUpdate(model))">
        <DataAnnotationsValidator/>
        @if (_mutating)
        {
          @Edit(model)
          <div Class="d-flex flex-column mt-4">
            <div Class="d-flex flex-row">
              <MudButton
                Variant="Variant.Filled"
                Color="Color.Success"
                ButtonType="ButtonType.Submit">
                @Translate("Update")
              </MudButton>
              <MudButton
                Variant="Variant.Filled"
                Color="Color.Secondary"
                OnClick="@(() => _mutating = !_mutating)"
                Class="ml-4">
                @Translate("Preview")
              </MudButton>
            </div>
            <MudButton
              Variant="Variant.Filled"
              Color="Color.Error"
              OnClick="@(() => OnDelete(model))"
              Class="mt-8 align-self-start">
              @Translate("Delete")
            </MudButton>
          </div>
        }
        else
        {
          @Details(model)
        }
      </EditForm>
    }
  </Found>
  <Created Context="model">
    @if (Label is not null)
    {
      @Label(model)
    }
    else
    {
      <MudText Typo="Typo.h5" Class="mb-2">
        @Translate("Create") @(typeof(T).Name)
      </MudText>
    }
    <MudDivider Class="mb-4" />
    <EditForm
      Model="@model"
      OnValidSubmit="@(() => OnCreate(model))">
      <DataAnnotationsValidator/>
      @if (!_mutating)
      {
        @Edit(model)
        <div Class="d-flex flex-row mt-4">
          <MudButton
            ButtonType="ButtonType.Submit"
            Variant="Variant.Filled"
            Color="Color.Success">
            @Translate("Create")
          </MudButton>
          <MudButton
            OnClick="@(() => _mutating = !_mutating)"
            Variant="Variant.Filled"
            Color="Color.Secondary"
            Class="ml-4">
            @Translate("Preview")
          </MudButton>
        </div>
      }
      else
      {
        @Details(model)
        <div Class="d-flex flex-row mt-4">
          <MudButton
            OnClick="@(() => _mutating = !_mutating)"
            Variant="Variant.Filled"
            Color="Color.Warning">
            @Translate("Edit")
          </MudButton>
        </div>
      }
    </EditForm>
  </Created>
</Loading>

@code {

  [Parameter]
  public T? Value { get; set; }

  [Parameter]
  public string? Id { get; set; } = default!;

  [Parameter]
  public RenderFragment<T>? Label { get; set; } = default!;

  [Parameter]
  public RenderFragment? Progress { get; set; }

  [Parameter]
  public Func<T?>? Load { get; set; }

  [Parameter]
  public Func<Task<T?>>? LoadAsync { get; set; }

  [Parameter]
  public Func<T>? New { get; set; }

  [Parameter]
  public Func<Task<T>>? NewAsync { get; set; }

  [Parameter]
  public RenderFragment<string>? Error { get; set; }

  [Parameter]
  public Action<T>? Create { get; set; }

  [Parameter]
  public Func<T, Task>? CreateAsync { get; set; }

  [Parameter]
  public Action<T>? Update { get; set; }

  [Parameter]
  public Func<T, Task>? UpdateAsync { get; set; }

  [Parameter]
  public Action<T>? Delete { get; set; }

  [Parameter]
  public Func<T, Task>? DeleteAsync { get; set; }

  [Parameter]
  public RenderFragment<T> Details { get; set; } = default!;

  [Parameter]
  public RenderFragment<T> Edit { get; set; } = default!;

  private bool _mutating;

  private async Task OnCreate(T model)
  {
    try
    {
      if (Create is not null)
      {
        Create(model);
      }
      else if (CreateAsync is not null)
      {
        await CreateAsync(model);
      }
      else if (model?.GetType().IsAssignableTo(typeof(IAuditable)) ?? false)
      {
        var mutations = ScopedServices.GetRequiredService<AgnosticMutations>();
        mutations.Create((model as IAuditable)!);
        await mutations.Save();
      }
      else
      {
        throw new InvalidOperationException(
          $"No create strategy found for {model.GetType()}");
      }
    }
    catch (Exception ex)
    {
      DialogService.Show<MutatingFailure>(
        $"Not saved - {ex.Message}",
        new DialogOptions { CloseOnEscapeKey = true });
      return;
    }

    DialogService.Show<MutatingSuccess>(
      "Saved",
      new DialogOptions { CloseOnEscapeKey = true });
  }

  private async Task OnUpdate(T model)
  {
    try
    {
      if (Update is not null)
      {
        Update(model);
      }
      else if (UpdateAsync is not null)
      {
        await UpdateAsync(model);
      }
      else if (model?.GetType().IsAssignableTo(typeof(IAuditable)) ?? false)
      {
        var mutations = ScopedServices.GetRequiredService<AgnosticMutations>();
        mutations.Update((model as IAuditable)!);
        await mutations.Save();
      }
      else
      {
        throw new InvalidOperationException(
          $"No update strategy found for {model.GetType()}");
      }
    }
    catch (Exception ex)
    {
      DialogService.Show<MutatingFailure>(
        $"Not saved - {ex.Message}",
        new DialogOptions { CloseOnEscapeKey = true });
      return;
    }

    DialogService.Show<MutatingSuccess>(
      "Saved",
      new DialogOptions { CloseOnEscapeKey = true });
  }

  private async Task OnDelete(T model)
  {
    try
    {
      if (Delete is not null)
      {
        Delete(model);
      }
      else if (DeleteAsync is not null)
      {
        await DeleteAsync(model);
      }
      else if (model?.GetType().IsAssignableTo(typeof(IAuditable)) ?? false)
      {
        var mutations = ScopedServices.GetRequiredService<AgnosticMutations>();
        mutations.Delete((model as IAuditable)!);
        await mutations.Save();
      }
      else
      {
        throw new InvalidOperationException(
          $"No delete strategy found for {model.GetType()}");
      }
    }
    catch (Exception ex)
    {
      DialogService.Show<MutatingFailure>(
        $"Not saved - {ex.Message}",
        new DialogOptions { CloseOnEscapeKey = true });
      return;
    }

    DialogService.Show<MutatingSuccess>(
      "Saved",
      new DialogOptions { CloseOnEscapeKey = true });
  }

}
