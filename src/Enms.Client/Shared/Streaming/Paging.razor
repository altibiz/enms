@namespace Enms.Client.Shared.Streaming

@typeparam T where T : notnull
@using System.Text.Json
@using Enms.Business.Models.Abstractions
@using Enms.Business.Queries.Abstractions
@using Enms.Business.Queries.Agnostic
@using Microsoft.Extensions.DependencyInjection
@using MudBlazor
@inherits Enms.Client.Base.EnmsOwningComponentBase

<Loading
  T="PaginatedList<T>"
  Load="@(Page is null ? null : () => Page(_pageNumber))"
  LoadAsync="@(PageAsync is not null ? () => PageAsync(_pageNumber) : Page is null && typeof(T).IsAssignableTo(typeof(IModel)) ? () => ScopedServices.GetRequiredService<AgnosticQueries>().ReadDynamic<T>(pageNumber: _pageNumber, pageCount: PageCount) : null)"
  Progress="@Progress"
  Error="@Error">
  <Found Context="page">
    @if (page.Items.Count == 0)
    {
      if (Empty is not null)
      {
        @Empty
      }
      else
      {
        <Empty/>
      }
    }
    else
    {
      if (Summary is not null)
      {
        foreach (var item in page.Items)
        {
          @Summary(item)
        }
      }
      else
      {
        foreach (var item in page.Items)
        {
          <MudText>
            @JsonSerializer.Serialize(item, JsonSerializerOptions)
          </MudText>
        }
      }

      <MudPagination
        class="mt-4"
        @bind-Selected="_pageNumber"
        PageSize="PageCount"
        TotalItems="page.TotalCount"/>
    }
  </Found>
</Loading>

@code {

  [Parameter]
  public Func<int, PaginatedList<T>>? Page { get; set; }

  [Parameter]
  public Func<int, Task<PaginatedList<T>>>? PageAsync { get; set; }

  [Parameter]
  public RenderFragment? Progress { get; set; }

  [Parameter]
  public RenderFragment<string>? Error { get; set; }

  [Parameter]
  public RenderFragment<T>? Summary { get; set; }

  [Parameter]
  public RenderFragment? Empty { get; set; }

  [Parameter]
  public int PageCount { get; set; } = QueryConstants.DefaultPageCount;

  private int _pageNumber = 1;

  private static readonly JsonSerializerOptions JsonSerializerOptions =
    new()
    {
      WriteIndented = true
    };

}
